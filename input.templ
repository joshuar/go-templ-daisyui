// Copyright 2024 Joshua Rich <joshua.rich@gmail.com>.
// SPDX-License-Identifier: MIT

package components

templ (i Input) Show() {
	switch  {
		case i.FormControl:
			@i.asForm()
		case i.Label != "":
			@i.withTextLabel()
		case i.Icon != nil:
			@i.withIconLabel()
		default:
			@i.show("w-full max-w-xs")
	}
}

templ (i Input) show(classes ...string) {
	<input
		name={ i.ID }
		type={ i.Type.String() }
		if i.Placeholder != "" {
			placeholder={ i.Placeholder }
		}
		class={ i.Class(), classes }
		if i.Value !="" {
			value={ i.Value }
		}
		{ i.Attributes()... }
	/>
}

templ (i Input) withTextLabel() {
	<label class={ i.Class(), "flex items-center gap-2" }>
		{ i.Label }
		@i.show("grow")
		{ children... }
	</label>
}

templ (i Input) withIconLabel() {
	<label class={ i.Class(), "flex items-center gap-2" }>
		switch i.IconAlignment {
			case AlignLeft:
				@i.Icon.Show()
				@i.show("grow")
			case AlignRight:
				@i.show("grow")
				@i.Icon.Show()
		}
		{ children... }
	</label>
}

templ (i Input) asForm() {
	<div
		id={ i.ID }
		hx-target="this"
		hx-swap="outerHTML"
		class="w-full"
	>
		<label class="form-control w-full max-w-xs">
			if i.Label != "" {
				<div class="label">
					<span class="label-text">{ i.Label }</span>
					if i.Optional {
						<span class="badge badge-info">Optional</span>
					}
				</div>
			}
			switch  {
				case i.Label != "":
					@i.withTextLabel()
				case i.Icon != nil:
					@i.withIconLabel()
				default:
					@i.show("w-full max-w-xs")
			}
			if i.Error != "" {
				<div class="label">
					<span class="label-text-alt text-error">
						@NewIcon("circle-exclamation", WithColor[Icon](ColorError)).Show()
						{ i.Error }
					</span>
				</div>
			}
		</label>
	</div>
}
