// Copyright 2024 Joshua Rich <joshua.rich@gmail.com>.
// SPDX-License-Identifier: 	MIT

package components

// layoutModifier returns the Card layout modifier value.
func (c CardProps) layoutModifier() string {
	switch c.layout {
	case CardLayoutCompact:
		return "card-compact"
	case CardLayoutSide:
		return "card-side"
	default:
		return "card-normal"
	}
}

// Card is a DaisyUI Card component.
//
// https://daisyui.com/components/card/
templ Card(options ...Option[CardProps]) {
	{{ card := BuildCard(options...) }}
	<div
		class={ "card",
		templ.KV("card-bordered",card.border),
		templ.KV("glass",card.UseGlass()),
		templ.KV("image-full",card.fullImage),
		templ.KV(card.layoutModifier(),card.layout > 0),
		templ.KV(card.setShadow(),card.shadowSize > 0),
		card.setBaseColor() }
		{ card.Attributes()... }
		if card.id != "" {
			id={ card.id }
		}
	>
		@cardBody(card)
	</div>
}

templ cardBody(card CardProps) {
	if card.Image != nil {
		@cardImage(card.Image, card.centered)
	}
	<div
		class={ "card-body",
	templ.KV("items-center text-center", card.centered) }
		if card.Body.attributes != nil {
			{ card.Body.attributes... }
		}
	>
		if len(card.TopRightActions) >0 {
			@cardActions("justify-end", card.TopRightActions...)
		}
		if card.Title != nil {
			@cardTitle(*card.Title)
		}
		if card.Body.content != nil {
			@card.Body.content
		}
		if len(card.BottomRightActions) >0 {
			@cardActions("justify-end", card.BottomRightActions...)
		}
		if card.Badges != nil {
			<div class="card-actions justify-end">
				for _, badge := range card.Badges {
					@badge
				}
			</div>
		}
	</div>
}

// cardImage will render the Card image, if available.
templ cardImage(image templ.Component, centered bool) {
	<figure
		if centered {
			class="px-10 pt-10"
		}
	>
		@image
	</figure>
}

// cardTitle will render the Card title.
templ cardTitle(props cardTitleProps) {
	switch props.size {
		case H1:
			<h1 class="card-title">
				{ props.text }
				if len(props.badges) > 0 {
					@cardTitleBadges(props.badges...)
				}
			</h1>
		case H2:
			<h2 class="card-title text-wrap">
				{ props.text }
				if len(props.badges) > 0 {
					@cardTitleBadges(props.badges...)
				}
			</h2>
		case H3:
			<h3 class="card-title">
				{ props.text }
				if len(props.badges) > 0 {
					@cardTitleBadges(props.badges...)
				}
			</h3>
		case H4:
			<h4 class="card-title">
				{ props.text }
				if len(props.badges) > 0 {
					@cardTitleBadges(props.badges...)
				}
			</h4>
		case H5:
			<h5 class="card-title">
				{ props.text }
				if len(props.badges) > 0 {
					@cardTitleBadges(props.badges...)
				}
			</h5>
		case H6:
			<h6 class="card-title">
				{ props.text }
				if len(props.badges) > 0 {
					@cardTitleBadges(props.badges...)
				}
			</h6>
	}
}

// cardTitleBadges will render a list of badges after the Card title.
templ cardTitleBadges(badges ...templ.Component) {
	for _, badge := range badges {
		@badge
	}
}

// cardActions will render a list of actions, justified with the provided justify
// value.
templ cardActions(justify string, actions ...templ.Component) {
	<div class={ "card-actions", justify }>
		for _, action := range actions {
			@action
		}
	</div>
}
