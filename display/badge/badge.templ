// Copyright 2024 Joshua Rich <joshua.rich@gmail.com>.
// SPDX-License-Identifier: 	AGPL-3.0-or-later

package badge

import (
	"github.com/joshuar/go-templ-daisyui/modifiers/color"
	"github.com/joshuar/go-templ-daisyui/modifiers/size"
	"github.com/joshuar/go-templ-daisyui/modifiers/state"
	"strings"
)

// size returns the size class for a Badge.
func (badge *Props) applySize() string {
	switch badge.size {
	case size.XS:
		return "badge-xs"
	case size.SM:
		return "badge-sm"
	case size.MD:
		return "badge-md"
	case size.LG:
		return "badge-lg"
	case size.XL:
		return "badge-xl"
	default:
		return "badge-md"
	}
}

// applyThemeColor applies a theme color to the Component.
func (badge *Props) applyThemeColor() string {
	themeColor := "badge-neutral"

	switch badge.GetThemeColor() {
	case color.Primary:
		themeColor = "badge-primary"
	case color.Secondary:
		themeColor = "badge-secondary"
	case color.Accent:
		themeColor = "badge-accent"
	case color.Neutral:
		themeColor = "badge-neutral"
	case color.Ghost:
		themeColor = "badge-ghost"
	}

	if badge.OutlineTheme() {
		themeColor = themeColor + " badge-outline"
	}

	return themeColor
}

// applyStateColor applies a state color to the Component.
func (badge *Props) applyStateColor() string {
	var stateColor string

	switch badge.GetStateColor() {
	case state.Info:
		stateColor = "badge-info"
	case state.Success:
		stateColor = "badge-sucess"
	case state.Warning:
		stateColor = "badge-warning"
	case state.Error:
		stateColor = "badge-error"
	}

	if badge.OutlineState() {
		stateColor = stateColor + " badge-outline"
	}

	return stateColor
}

templ (badge *Props) Show(classes ...string) {
	<span
		class={
			"badge",
			templ.KV(badge.applySize(), badge.size.Valid()),
			templ.KV(badge.applyThemeColor(), badge.ValidThemeColor()),
			templ.KV(badge.applyStateColor(), badge.ValidStateColor()),
			strings.Join(classes, " "),
		}
	>
		if badge.text != "" {
			{ badge.text }
		}
	</span>
}
