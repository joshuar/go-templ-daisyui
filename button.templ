// Copyright 2025 Joshua Rich <joshua.rich@gmail.com>.
// SPDX-License-Identifier: 	MIT

package components

templ Button(options ...Option[*ButtonProps]) {
	{{ btn := BuildButton(options...) }}
	<button
		class={
			"btn",
			templ.KV("no-animation", btn.disableAnimation),
			templ.KV("btn-active", btn.IsActive()),
			templ.KV("btn-disabled", btn.IsDisabled()),
			templ.KV("glass", btn.UseGlass()),
			templ.KV("btn-ghost", btn.GhostIsSet()),
			templ.KV(btn.setColor(), btn.ColorIsSet()),
			templ.KV(btn.setStateColor(), btn.StateColorIsSet()),
			templ.KV(btn.setShape(), btn.HasShape()),
			templ.KV(btn.setSize(), btn.SizeIsSet()),
		}
		{ btn.Attributes()... }
		autofocus?={ btn.HasAutofocus() }
	>
		@btn.content.value
	</button>
}

// setState sets a state modifier of the Button.
func (b ButtonProps) setStateColor() string {
	var state string

	switch b.stateColor {
	case StateInfo:
		state = "btn-info"
	case StateSuccess:
		state = "btn-success"
	case StateWarning:
		state = "btn-warning"
	case StateError:
		state = "btn-error"
	}

	if b.stateColorOutline {
		state = state + " btn-outline"
	}

	return state
}

// setColor sets a color modifier of the Button.
func (b ButtonProps) setColor() string {
	color := "btn-neutral"

	switch b.color {
	case ColorPrimary:
		color = "btn-primary"
	case ColorSecondary:
		color = "btn-secondary"
	case ColorAccent:
		color = "btn-accent"
	case ColorNeutral:
		color = "btn-neutral"
	case ColorGhost:
		color = "btn-ghost"
	}

	// Neutral and Ghost colors don't have an outline variant.
	if b.colorOutline && (b.color != ColorNeutral && b.color != ColorGhost) {
		color = color + " btn-outline"
	}

	return color
}

// setShape sets the shape modifier of the Button.
func (b ButtonProps) setShape() string {
	shape := ""
	switch b.shape {
	case ButtonCircle:
		shape = "btn-circle"
	case ButtonSquare:
		shape = "btn-square"
	case ButtonWide:
		shape = "btn-wide"
	case ButtonBlock:
		shape = "btn-block"
	}

	if b.shapeOutline {
		shape = shape + " btn-outline"
	}

	return shape
}

// setSize sets the size modifier of the Badge.
func (b ButtonProps) setSize() string {
	switch b.size {
	case XS:
		return "btn-xs"
	case SM:
		return "btn-sm"
	case MD:
		return "btn-md"
	case LG:
		return "btn-lg"
	case XL:
		return "btn-xl"
	default:
		return "btn-md"
	}
}
