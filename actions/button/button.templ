// Copyright 2025 Joshua Rich <joshua.rich@gmail.com>.
// SPDX-License-Identifier: 	AGPL-3.0-or-later

package button

import (
	"github.com/joshuar/go-templ-daisyui/modifiers/color"
	"github.com/joshuar/go-templ-daisyui/modifiers/size"
	"github.com/joshuar/go-templ-daisyui/modifiers/state"
	"strings"
)

// shape sets the shape of the Button.
func (btn *Props) setShape() string {
	shape := ""
	switch btn.shape {
	case Circle:
		shape = "btn-circle"
	case Square:
		shape = "btn-square"
	case Wide:
		shape = "btn-wide"
	case Block:
		shape = "btn-block"
	}

	if btn.shapeOutline {
		shape = shape + " btn-outline"
	}

	return shape
}

// size returns the size class of the button.
func (btn *Props) applySize() string {
	switch btn.size {
	case size.XS:
		return "btn-xs"
	case size.SM:
		return "btn-sm"
	case size.MD:
		return "btn-md"
	case size.LG:
		return "btn-lg"
	case size.XL:
		return "btn-xl"
	default:
		return "btn-md"
	}
}

// applyThemeColor applies a theme color to the Component.
func (btn *Props) applyThemeColor() string {
	themeColor := "btn-neutral"

	switch btn.GetThemeColor() {
	case color.Primary:
		themeColor = "btn-primary"
	case color.Secondary:
		themeColor = "btn-secondary"
	case color.Accent:
		themeColor = "btn-accent"
	case color.Neutral:
		themeColor = "btn-neutral"
	case color.Ghost:
		themeColor = "btn-ghost"
	}

	if btn.OutlineTheme() {
		themeColor = themeColor + " btn-outline"
	}

	return themeColor
}

// applyStateColor applies a state color to the Component.
func (btn *Props) applyStateColor() string {
	var stateColor string

	switch btn.GetStateColor() {
	case state.Info:
		stateColor = "btn-info"
	case state.Success:
		stateColor = "btn-sucess"
	case state.Warning:
		stateColor = "btn-warning"
	case state.Error:
		stateColor = "btn-error"
	}

	if btn.OutlineState() {
		stateColor = stateColor + " btn-outline"
	}

	return stateColor
}

templ (btn *Props) Show(classes ...string) {
	<button
		class={ "btn",
            templ.KV("no-animation", btn.noClickAnimation),
            templ.KV(btn.setShape(), btn.shape > 0),
			templ.KV(btn.applySize(),btn.size.Valid()),
			templ.KV(btn.applyThemeColor(),btn.ValidThemeColor()),
			templ.KV(btn.applyStateColor(),btn.ValidStateColor()),
            templ.KV(strings.Join(classes," "),len(classes) > 0) }
		{ btn.ShowAttributes()... }
		autofocus?={ btn.autofocus }
	>
		if btn.content != nil {
			@btn.content
		}
	</button>
}
