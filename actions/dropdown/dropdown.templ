// Copyright 2025 Joshua Rich <joshua.rich@gmail.com>.
// SPDX-License-Identifier: 	AGPL-3.0-or-later

package dropdown

import "strings"

// applyOpenFrom sets how the Dropdown will open.
func applyOpenFrom(from Open) string {
	switch from {
	case OpenBottom:
		return "dropdown-bottom"
	case OpenTop:
		return "dropdown-top"
	case OpenLeft:
		return "dropdown-left"
	case OpenRight:
		return "dropdown-right"
	default:
		return "dropdown-bottom"
	}

}

// showAsClass renders the Dropdown as a <div></div> element.
templ (dropdown *Props) showAsClass(classes ...string) {
	<div
		class={ "dropdown",
			templ.KV(applyOpenFrom(dropdown.openProps.From), dropdown.openProps.From > 0),
			templ.KV("dropdown-hover", dropdown.openProps.Hover),
			templ.KV("dropdown-open", dropdown.openProps.Force),
			templ.KV("dropdown-end", dropdown.openProps.EndAlignment),
			templ.KV(dropdown.GetHiddenBreakpoint(), dropdown.HiddenBreakpointSet()),
			templ.KV(dropdown.GetRevealedBreakpoint(), dropdown.RevealedBreakpointSet()),
			templ.KV(strings.Join(classes, " "), len(classes) > 0) }
	>
		if dropdown.button != nil {
			@dropdown.button.Show("m-1")
		} else {
			<div tabindex="0" role="button" class="btn m-1">Click</div>
		}
		@dropdown.content.Show("dropdown-content", "rounded-box", "z-[1]", "shadow")
	</div>
}

// showAsDetails renders the Dropdown as a <details></details> element.
templ (dropdown *Props) showAsDetails(classes ...string) {
	<details
		class={ "dropdown",
			templ.KV(applyOpenFrom(dropdown.openProps.From), dropdown.openProps.From > 0),
			templ.KV("dropdown-hover", dropdown.openProps.Hover),
			templ.KV("dropdown-open", dropdown.openProps.Force),
			templ.KV("dropdown-end", dropdown.openProps.EndAlignment),
			templ.KV(dropdown.GetHiddenBreakpoint(), dropdown.HiddenBreakpointSet()),
			templ.KV(dropdown.GetRevealedBreakpoint(), dropdown.RevealedBreakpointSet()),
			templ.KV(strings.Join(classes, " "), len(classes) > 0) }
	>
		if dropdown.button != nil {
			@dropdown.button.ShowAsSummary("m-1")
		} else {
			<summary class="btn m-1">Click</summary>
		}
		@dropdown.content.Show("dropdown-content", "z-[1]", "shadow")
	</details>
}

// Show will render the Dropdown with the given style option supplied. If no
// style option was supplied, it will default to using a <details></details> element.
templ (dropdown *Props) Show(classes ...string) {
	switch dropdown.style {
		case Class:
			@dropdown.showAsClass(classes...)
		default:
			@dropdown.showAsDetails(classes...)
	}
}
