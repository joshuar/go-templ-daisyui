// Copyright 2025 Joshua Rich <joshua.rich@gmail.com>.
// SPDX-License-Identifier: 	AGPL-3.0-or-later


package modal

import (
	"context"
	"github.com/joshuar/go-templ-daisyui/actions/button"
	"github.com/sebasvil20/templicons/i"
	"github.com/sebasvil20/templicons/tabler"
	"io"
	"slices"
)

// Render will render the modal. Satisfies templ.Component.
func (modal *Props) Render(ctx context.Context, w io.Writer) error {
	return modal.template().Render(ctx, w)
}

templ (modal *Props) template() {
	<dialog
		class={ "modal", modal.classes.Show() }
		_="init add @open to me end on removeModal remove me"
		{ modal.attributes.ShowAttributes()... }
	>
		<div class="modal-box bg-base-200">
			// If closeButton option is set, generate a close button.
			if modal.closeButton {
				@modal.showCloseButton()
			}
			// Display the modal content.
			{ children... }
			// Display any action buttons.
			if len(modal.actions) > 0 {
				<form method="dialog">
					<div class="modal-action">
						for action := range slices.Values(modal.actions) {
							@action
						}
					</div>
				</form>
			}
		</div>
		// If closeOutside option is set, generate backdrop with close action.
		if modal.closeOutside {
			<div class="modal-backdrop" _={ "on click or keyup[key=='Esc'] remove @open from " + modal.attributes.GetID() + " then send removeModal" }></div>
		}
	</dialog>
}

templ (modal *Props) showCloseButton() {
	<form method="dialog">
		@button.Build(
			button.WithClasses(button.Circle, button.SM, "absolute", "right-2", "top-2"),
			button.WithAttributes(templ.Attributes{
				"_": "on click or keyup[key=='Esc'] remove @open from " + modal.attributes.GetID() + " then send removeModal",
			}),
		) {
			@tabler.X(i.Props{Size: i.SizeXS})
		}
	</form>
}
