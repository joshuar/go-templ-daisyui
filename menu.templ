// Copyright 2024 Joshua Rich <joshua.rich@gmail.com>.
// SPDX-License-Identifier: 	AGPL-3.0-or-later


package components

// setLayout sets the layout of the Menu.
func setLayout(layout Layout) string {
	switch layout {
	case HorizontalLayout:
		return "menu-horizontal"
	case VerticalLayout:
		return "menu-vertical"
	default:
		return "menu-vertical"
	}
}

// setSize sets the size modifier of the Menu.
func (m Menu) setSize() string {
	switch m.size {
	case XS:
		return "menu-xs"
	case SM:
		return "menu-sm"
	case MD:
		return "menu-md"
	case LG:
		return "menu-lg"
	case XL:
		return "menu-xl"
	default:
		return "menu-md"
	}
}

templ (m Menu) Show() {
	<ul
		class={
			"menu",
			templ.KV(setLayout(m.layout), m.LayoutIsSet()),
			templ.KV(m.setSize(), m.SizeIsSet()),
			templ.KV(m.setHiddenBreakpoint(), m.HiddenBreakpointIsSet()),
			templ.KV(m.setRevealedBreakpoint(), m.RevealedBreakpointIsSet()),
		}
	>
		if m.title != "" {
			<li class="menu-title">{ m.title }</li>
		}
		@m.ShowItems()
	</ul>
}

templ (dm DropDownMenu) Show() {
	<details class="dropdown dropdown-bottom dropdown-end">
		<summary
			_="on click halt the event's bubbling end"
			class={ "btn",
				"btn-ghost",
				"btn-circle",
				templ.KV(dm.setHiddenBreakpoint(), dm.HiddenBreakpointIsSet()),
				templ.KV(dm.setRevealedBreakpoint(),
				dm.RevealedBreakpointIsSet()) }
		>
			@Icon("fa-ellipsis-vertical")
		</summary>
		<ul
			class={ "menu",
			templ.KV(setLayout(dm.layout),dm.LayoutIsSet()),
		templ.KV(dm.setSize(),dm.SizeIsSet()),
			 "dropdown-content",
			  dm.setBaseColor(),
			  "rounded-box",
			  "z-[1]",
			   "m-2",
		"p-2",
		"shadow" }
		>
			@dm.ShowItems()
		</ul>
	</details>
}
